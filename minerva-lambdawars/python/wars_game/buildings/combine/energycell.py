from srcbase import SOLID_NONE
from vmath import Vector, QAngle
from core.buildings import WarsBuildingInfo, UnitBaseBuilding as BaseClass
from entities import entity
from particles import PrecacheParticleSystem, PATTACH_POINT_FOLLOW, PATTACH_POINT


@entity('build_comb_energycell', networked=True)
class CombineEnergyCell(BaseClass):
    if isserver:
        def Precache(self):
            super().Precache()
            
            PrecacheParticleSystem( self.electricityparticlename )
    else:
        def OnConstructed(self):
            super().OnConstructed()
            
            self.CreateElectricityEffects()
            
        def CreateElectricityEffects(self):
            if not self.electricityfx:
                self.electricityfx = self.ParticleProp().Create(self.electricityparticlename, PATTACH_POINT_FOLLOW, self.electricityattachmentname)
                
                #self.electricityfx.SetControlPointEntity(0, self)
                
                #self.ParticleProp().AddControlPoint(self.electricityfx, 0, self, PATTACH_POINT_FOLLOW, 'coreMid')
                
                #forward = Vector(); right = Vector(); up = Vector()
                #self.GetVectors(forward, right, up)
                #self.electricityfx.SetControlPointOrientation(0, forward, right, up)
            
        def StopElectricityEffects(self):
            if self.electricityfx:
                self.ParticleProp().StopEmission(self.electricityfx)
                self.electricityfx = None
                
        def UpdateOnRemove(self):
            super().UpdateOnRemove()
            
            self.StopElectricityEffects()

        def ExplodeHandler(self, event):
            self.StopElectricityEffects()
            super().ExplodeHandler(event)
                
    # Settings
    autoconstruct = False
    buildtarget = Vector(0, -280, 32)
    buildangle = QAngle(0, 0, 0)
    electricityfx = None
    electricityattachmentname = 'coreMid'
    electricityparticlename = 'pg_electricity03'


# See wars_game.buildings.combine.basepowered.PoweredGeneratorScrapInfo
@entity('build_comb_powergen_scrap', networked=True)
class CombinePowerGenScrap(CombineEnergyCell):
    scrapmarker = None
    scrapmarkersolid = None
    electricityattachmentname = 'core'
    electricityparticlename = 'pg_electricity04'
    
    def UpdateOnRemove(self):
        super().UpdateOnRemove()
        
        self.ReleaseScrapMarker()
        
    def Event_Killed(self, info):
         super().Event_Killed(info)
         
         self.ReleaseScrapMarker()
    
    def ClaimScrapMarker(self, scrapmarker):
        if scrapmarker == self.scrapmarker:
            return
        assert self.scrapmarker == None, 'can only have one scrapmarker'
        self.scrapmarker = scrapmarker
        self.scrapmarkersolid = scrapmarker.GetSolid()
        scrapmarker.SetSolid(SOLID_NONE)
        
        self.resourcesleft['power'] = scrapmarker.scrap
        
    def ReleaseScrapMarker(self):
        if not self.scrapmarker:
            return
        self.scrapmarker.SetSolid(self.scrapmarkersolid)
        self.scrapmarker = None
        
    def CanGenerateResources(self, resourcetype, amount):
        if not self.scrapmarker:
            return False
        return super().CanGenerateResources(resourcetype, amount)
        
    def OnGenerateResource(self, resourcetype, amount):
        """ Called on resource being generated by building. """
        super().OnGenerateResource(resourcetype, amount)
        
        if not self.scrapmarker:
            return
        self.scrapmarker.scrap -= amount
        
    # Show a custom panel when this is the only selected building    
    if isclient:
        # Called when this is the only selected unit
        # Allows the unit panel class to be changed
        def UpdateUnitPanelClass(self):
            from wars_game.hud import HudBuildPowerExtractor
            self.unitpanelclass = HudBuildPowerExtractor
        
class EnergyCellInfo(WarsBuildingInfo):
    name = "build_comb_energycell" 
    cls_name = "build_comb_energycell"
    displayname = '#BuildCombEnergyCell_Name'
    description = '#BuildCombEnergyCell_Description'
    image_name  = 'vgui/combine/buildings/build_comb_energy_cell'
    modelname = 'models/pg_props/pg_buildings/combine/pg_combine_energy_cell.mdl'
    explodemodel = 'models/pg_props/pg_buildings/combine/pg_combine_energy_cell_des.mdl'
    costs = [('requisition', 20)]
    resource_category = 'economy'
    providescaps = [('power', 50)]
    idleactivity = 'ACT_IDLE'
    constructionactivity = 'ACT_CONSTRUCTION'
    explodeactivity = 'ACT_EXPLODE'
    health = 250
    buildtime = 20.0
    attackpriority = -1
    abilities   = {
        8 : 'cancel',
    }
    sound_select = 'build_comb_energycell'
    sound_death = 'build_comb_battery_destroy'
    explodeparticleeffect = 'pg_combine_energy_cell_des'
    explodeshake = (2, 10, 2, 512) # Amplitude, frequence, duration, radius
    sai_hint = WarsBuildingInfo.sai_hint | set(['sai_building_energycell'])
    requirerotation = False
    